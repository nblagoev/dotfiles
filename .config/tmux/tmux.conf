set -sa terminal-overrides ",xterm*:Tc"

set -g default-terminal "xterm-256color"
set -ga terminal-features ",xterm-256color:RGB"
set -ga terminal-overrides ",alacritty:RGB"

set -g display-time 1000
set -g set-clipboard off
set -g mouse on

unbind C-b
set -g prefix C-a
bind C-a send-prefix

set -g status-position bottom
set -g status-interval 5     # redraw status line every 5 seconds
set -g automatic-rename on

# Start windows and panes at 1, not 0
set -g base-index 1
set -g pane-base-index 1
set-window-option -g pane-base-index 1
set -g renumber-windows on

# Unbind default key bindings
unbind "\$"    # rename-session
unbind ,       # rename-window
unbind %       # split-window -h
unbind '"'     # split-window -v
unbind [       # copy-mode
unbind ]       # paste-buffer
unbind n       # next-window
unbind p       # previous-window
unbind l       # last-window
unbind M-n     # next window with alert
unbind M-p     # next window with alert
unbind &       # kill-window
unbind M-Up    # resize 5 rows up
unbind M-Down  # resize 5 rows down
unbind M-Right # resize 5 rows right
unbind M-Left  # resize 5 rows left

# Cycle through panes
bind -r [ select-pane -t :.-
bind -r ] select-pane -t :.+

# Prefix, Shift-arrow keys to resize panes
bind -r S-Up resize-pane -U 5
bind -r S-Down resize-pane -D 5
bind -r S-Left resize-pane -L 5
bind -r S-Right resize-pane -R 5

# split panes using \ and -
bind \\ split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# Create new window (no prefix)
bind -n C-n new-window -c "~"

# Cycle through tabs (repeated)
bind -r Tab last-window

# Rename session and window
bind r command-prompt -I "#{window_name}" "rename-window '%%'"
bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# Shift arrow keys without prefix to switch windows
bind -n S-Left  previous-window
bind -n S-Right next-window

# move windows (cycle) left and right (< and > can be repeated)
bind -r "<" swap-window -t -1\; select-window -t -1
bind -r ">" swap-window -t +1\; select-window -t +1

# Kill pane/window/session shortcuts
bind x kill-pane
bind X kill-window
bind C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"
bind Q confirm-before -p "kill-session #S? (y/n)" kill-session

# Detach from session
bind d detach
bind D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached"'

# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
bind C-u command-prompt -p "Session to merge with: " \
   "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

# Edit tmux.conf in default $EDITOR
bind C-e new-window -n '~/.config/tmux/tmux.conf' "zsh -c '\${EDITOR:-hx} ~/.config/tmux/tmux.conf && tmux source ~/.config/tmux/tmux.conf && tmux display \"#[align=centre]Config sourced\"'"
bind C-r source-file ~/.config/tmux/tmux.conf \; display '#[align=centre]Config sourced'

# Sync panes
bind C-y setw synchronize-panes \; display "#[align=centre]Sync #{?pane_synchronized,ON,OFF}"

# set vi-mode
set-window-option -g mode-keys vi
# keybindings
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi C-v send-keys -X rectangle-toggle
bind -T copy-mode-vi y send-keys -X copy-selection-and-cancel

# Copy selection on drag end event, but do not cancel copy mode and do not clear selection
# clear select on subsequence mouse click
bind -T copy-mode-vi MouseDragEnd1Pane \
    send-keys -X copy-selection "pbcopy"
bind -T copy-mode-vi MouseDown1Pane select-pane \;\
    send-keys -X clear-selection


## ---- Theme ----

set -g @catppuccin_flavor 'mocha'

set -g @catppuccin_window_status_style "custom"
set -g @catppuccin_window_left_separator "​"
set -g @catppuccin_window_right_separator " "
set -g @catppuccin_window_middle_separator ""
set -g @catppuccin_window_number " #I"
set -g @catppuccin_window_number_color "none"
set -g @catppuccin_window_number_position "left"
set -g @catppuccin_window_text " #{?automatic-rename,#(echo '#{pane_current_path}' | ~/.local/bin/tmux-window-name),#W}"
set -g @catppuccin_window_text_color "none"

set -g @catppuccin_window_current_number " #I"
set -g @catppuccin_window_current_number_color "#{@thm_lavender}"
set -g @catppuccin_window_current_text " #{?automatic-rename,#(echo '#{pane_current_path}' | ~/.local/bin/tmux-window-name),#W}"
set -g @catppuccin_window_current_text_color "none"

set -g @catppuccin_status_background "none"
set -g @catppuccin_status_justify "absolute-centre"
set -g @catppuccin_status_left_separator " "
set -g @catppuccin_status_right_separator "​"
set -g @catppuccin_status_middle_separator ""
set -g @catppuccin_status_connect_separator "no"

set -g @catppuccin_pane_status_enabled "off"
set -g @catppuccin_pane_border_status "off"
set -g pane-border-status bottom
set -g pane-border-format ""
set -g pane-border-style "bg=#{@thm_bg},fg=#{@thm_surface_0}"
set -g pane-active-border-style "#{?pane_in_mode,fg=#{@thm_pink},#{?pane_synchronized,fg=#{@thm_mauve},fg=#{@thm_overlay_0}}}"
set -g pane-border-lines single

set -g @catppuccin_host_icon "  "
set -g @catppuccin_host_text " #H "
set -g @catppuccin_host_color "#{@thm_yellow}"
set -g @catppuccin_session_icon " 󰘔 "
set -g @catppuccin_session_text " #S "

run ~/.config/tmux/plugins/catppuccin/tmux/catppuccin.tmux
set -g status-right "#{E:@catppuccin_status_session}"
set -g status-left ""

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'sainnhe/tmux-fzf'
set -g @plugin 'yardnsm/tmux-1password'

run '~/.tmux/plugins/tpm/tpm'
