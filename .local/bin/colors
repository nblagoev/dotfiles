#!/usr/bin/python3
"""Print a swatch using all 256 colors of 256-color-capable terminals."""

import sys


__author__ = "Marius Gedminas <marius@gedmin.as>"
__url__ = "https://github.com/mgedmin/scripts/blob/master/show-all-256-colors"
__version__ = "3.1"


def hrun(start, width, padding=0):
    return (
        [None] * padding + list(range(start, start + width)) + [None] * padding
    )


def vrun(start, width, height, padding=0):
    return [hrun(s, width, padding)
            for s in range(start, start + width * height, width)]


layout = [
    vrun(0, 8, 2),                # 16 standard xterm colors
    vrun(16, 6, 6 * 6, 1),        # 6x6x6 color cube
    vrun(16 + 6 * 6 * 6, 8, 3),   # 24 grey levels
]


def fg_seq(color):
    return '\033[38;5;%dm' % color


def bg_seq(color):
    return '\033[48;5;%dm' % color


reset_seq = '\033[0m'


def color_bar(seq, color, trail):
    if color is None:
        return '%s    %s' % (reset_seq, trail)
    else:
        return '%s %03d%s' % (seq(color), color, trail)


COLORS = [
    # Tango colors 0..15
    '#000000',
    '#cc0000',
    '#4d9a05',
    '#c3a000',
    '#3464a3',
    '#754f7b',
    '#05979a',
    '#d3d6cf',
    '#545652',
    '#ef2828',
    '#89e234',
    '#fbe84f',
    '#729ecf',
    '#ac7ea8',
    '#34e2e2',
    '#ededeb',
] + [
    # 6x6x6 color cube
    '#%02x%02x%02x' % (r, g, b)
    for r in [0] + list(range(95, 256, 40))
    for g in [0] + list(range(95, 256, 40))
    for b in [0] + list(range(95, 256, 40))
] + [
    # 24 greyscale levels
    '#%02x%02x%02x' % (l, l, l)
    for l in range(8, 248, 10)
]


def bg_seq_rgb(rgb):
    r = int(rgb[1:3], 16)
    g = int(rgb[3:5], 16)
    b = int(rgb[5:7], 16)
    return '\033[48;2;%s;%s;%sm' % (r, g, b)


def color_bar_rgb(seq, rgb, trail):
    return '%s %s%s' % (seq(rgb), rgb, trail)


def main():
    if len(sys.argv) > 1:
        for arg in sys.argv[1:]:
            color = int(arg)
            rgb = COLORS[color]
            print('%s%s - %s%s' % (color_bar(bg_seq, color, ' '), reset_seq,
                                   color_bar_rgb(bg_seq_rgb, rgb, ' '),
                                   reset_seq))
    else:
        for block in layout:
            print("")
            for row in block:
                fg_bar = ''.join(color_bar(fg_seq, color, '') for color in row)
                bg_bar = ''.join(color_bar(bg_seq, color, ' ')
                                 for color in row)
                print('%s%s    %s%s' % (fg_bar, reset_seq, bg_bar, reset_seq))


if __name__ == '__main__':
    main()
